// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("BACKEND_DATABASE_URL")
}

model registration {
  id               Int       @id() @default(autoincrement())
  contract_address String?
  nickname         String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  is_confirmed     Boolean?  @default(false)
  phone_number     String?
  email            String?
  starknet_address String?
  evm_address      String?
}

model User {
  id          String   @id @default(cuid())
  userAddress String   @unique
  email       String?  @unique
  name String?
  metadata Json?
  loginType   String
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  starknetAddress String?
  evmAddress String?

  // Relations to core data
  tasks Task[]
  goals Goal[]
  timerSessions TimerSession[]
  userSettings UserSettings?

  // Authentication relations
  sessions Session[]
  socialAccounts SocialAccount[]

  // New relations
  mentors Mentor[]
  messages Message[]
  fundingAccounts FundingAccount[]
  badges Badge[]
  quests Quests[]

  @@map("users")
}

model SocialAccount {
  id           String   @id @default(cuid())
  userId       String
  platform     String
  accountId    String
  username     String?
  picture      String?
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userAddress String?
  starknetAddress String?
  evmAddress String?
  metadata Json?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
  @@map("social_accounts")
}

// Mentor model for personal assistant/coach
model Mentor {
  id           String   @id @default(cuid())
  userId       String
  name         String
  role         String   @default("personal_assistant") // personal_assistant, coach, mentor, etc.
  knowledges   String[] // Array of knowledge areas/skills
  notes String?
  assistant_metadata Json?
  about        String?  // Description about the mentor
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  isPublic Boolean?
  imageUrl String?
  metadata Json?
  personality Json?
  knowledge Json?
  sources String[]

  accountEvmAddress String?
  evmAddressAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("mentors")
}

// Message model for chat conversations
model Message {
  id        String   @id @default(cuid())
  userId    String
  mentorId  String?
  role      String   // user, assistant, system
  content   String   // The message content
  prompt String?
  model     String?  // AI model used for response
  tokens    Int?     // Token count for cost tracking
  metadata  Json?    // Additional metadata (model params, etc.)
  createdAt DateTime @default(now())
  taskId String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  mentor Mentor? @relation(fields: [mentorId], references: [id], onDelete: SetNull)

  @@map("messages")
}

// Funding account model for payment processing
model FundingAccount {
  id              String   @id @default(cuid())
  userId          String
  accountType     String   // crypto, fiat, subscription
  accountName     String   // Display name for the account
  accountAddress  String?  // For crypto addresses
  accountDetails  Json?    // Encrypted account details
  isActive        Boolean  @default(true)
  balance         Decimal? @db.Decimal(10, 2) // Current balance
  currency        String   @default("USD")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("funding_accounts")
}

model MentorPerUser {
  id           String   @id @default(cuid())
  userId       String
  platform     String
  name String?
  knowledges String[]
  about String?
}

// Session model for JWT management
model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  refreshToken String?  @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isActive     Boolean  @default(true)
  userAgent    String?
  ipAddress    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Task model linked to users
model Task {
  id              String    @id @default(cuid())
  userId          String
  title           String
  description     String?
  completed       Boolean   @default(false)
  priority        String    @default("medium") // low, medium, high
  category        String?
  dueDate         DateTime?
  estimatedMinutes Int?
  actualMinutes   Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  timerSessions TimerSession[]

  @@map("tasks")
}

// Goal model linked to users
model Goal {
  id           String    @id @default(cuid())
  userId       String
  title        String
  description  String?
  targetDate   DateTime?
  completed    Boolean   @default(false)
  progress     Int       @default(0) // 0-100
  category     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  relatedTaskIds String[] // Array of task IDs as strings

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  timerSessions TimerSession[]

  @@map("goals")
}

// Timer session model (general)
model TimerSession {
  id        String    @id @default(cuid())
  type String
  userId    String
  taskId    String?
  goalId    String?
  startTime DateTime
  endTime   DateTime?
  duration  Int       // in seconds
  completed Boolean   @default(false)
  note     String?
  notes String[]
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task? @relation(fields: [taskId], references: [id], onDelete: SetNull)
  goal Goal? @relation(fields: [goalId], references: [id], onDelete: SetNull)


  metadata Json?
  isHavingFun     Boolean?
  activities      String[]  // Array of activities
  persons         String[]  // Array of persons
  location        String?
  weather         String?
  mood            String?
  energyLevel     String?
  productivityLevel String?

  @@map("timer_sessions")
}

// User settings model
model UserSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  defaultFocusDuration Int     @default(25) // in minutes
  defaultBreakDuration Int     @default(5)  // in minutes
  autoStartBreaks     Boolean  @default(false)
  autoStartSessions   Boolean  @default(false)
  notifications       Boolean  @default(true)
  theme               String   @default("auto") // light, dark, auto
  updatedAt           DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// Badge model for gamification
model Badge {
  id          String   @id @default(cuid())
  userId      String
  type        String   // e.g. 'daily_connection', 'streak', etc.
  name        String
  description String?
  icon        String?  // emoji or icon name
  dateAwarded DateTime @default(now())
  meta        Json?

  nftContractAddress String?
  nftTokenId String?
  imageUrl String?

  isCompleted String?
  requirements String[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type], map: "badges_userId_type_idx")
  @@map("badges")
}


// Badge model for gamification
model Quests {
  id          String   @id @default(cuid())
  userId      String
  isCompleted String?
  requirements String[]

  taskAbout String?
  type        String   // e.g. 'daily_connection', 'streak', etc.
  name        String
  description String?
  icon        String?  // emoji or icon name
  dateAwarded DateTime @default(now())
  meta        Json?

  nftContractAddress String?
  nftTokenId String?
  imageUrl String?


  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type], map: "quests_userId_type_idx")
  @@map("quests")
}