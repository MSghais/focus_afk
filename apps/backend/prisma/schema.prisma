// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("BACKEND_DATABASE_URL")
}

model registration {
  id               Int       @id() @default(autoincrement())
  contract_address String?
  nickname         String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  is_confirmed     Boolean?  @default(false)
  phone_number     String?
  email            String?
  starknet_address String?
  evm_address      String?
}

model User {
  id          String   @id @default(cuid())
  userAddress String   @unique
  email       String?  @unique
  name String?
  metadata Json?
  loginType   String
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  starknetAddress String?
  evmAddress String?

  // Relations to core data
  tasks Task[]
  goals Goal[]
  timerSessions TimerSession[]
  userSettings UserSettings?
  embeddingSync EmbeddingSync?

  // Gamification fields
  level Int? @default(1)
  totalXp Int? @default(0)
  streak Int? @default(0)
  longestStreak Int? @default(0)
  totalFocusMinutes Int? @default(0)
  completedQuests Int? @default(0)
  earnedBadges Int? @default(0)
  totalTokens Int? @default(0)

  // Authentication relations
  sessions Session[]
  socialAccounts SocialAccount[]

  soulboundToken String?

  // New relations
  mentors Mentor[]
  chats Chat[]
  messages Message[]
  fundingAccounts FundingAccount[]
  transactions Transactions[]
  badges Badge[]
  quests Quests[]

  notes Notes[]
  conversationSessions ConversationSession[]

  @@map("users")
}

model SocialAccount {
  id           String   @id @default(cuid())
  userId       String
  platform     String
  accountId    String
  username     String?
  picture      String?
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userAddress String?
  starknetAddress String?
  evmAddress String?
  metadata Json?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
  @@map("social_accounts")
}

// Mentor model for personal assistant/coach
model Mentor {
  id           String   @id @default(cuid())
  userId       String
  name         String
  role         String   @default("personal_assistant") // personal_assistant, coach, mentor, etc.
  knowledges   String[] // Array of knowledge areas/skills
  notes String?
  assistant_metadata Json?
  about        String?  // Description about the mentor
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isPublic Boolean? @default(false)

  instructions String[]


  imageUrl String?
  metadata Json?
  personality Json?
  knowledge Json?
  sources String[]

  accountEvmAddress String?
  evmAddressAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chats Chat[]
  messages Message[]

  @@map("mentors")
}


// Chat model for conversation containers
model Chat {
  id          String   @id @default(cuid())
  userId      String
  mentorId    String?
  title       String?  // Optional title for the conversation
  isActive    Boolean  @default(true)
  isPublic Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  metadata    Json?    // Additional metadata for the chat

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  mentor Mentor? @relation(fields: [mentorId], references: [id], onDelete: SetNull)
  messages Message[]

  @@map("chats")
}


// Message model for chat conversations
model Message {
  id        String   @id @default(cuid())
  userId    String   // Link to the user who owns this message
  chatId    String?  // Optional link to the chat conversation
  mentorId  String?  // Optional link to the mentor
  role      String   // user, assistant, system
  content   String   // The message content
  prompt    String?
  model     String?  // AI model used for response
  tokens    Int?     // Token count for cost tracking
  metadata  Json?    // Additional metadata (model params, etc.)
  createdAt DateTime @default(now())
  taskId    String?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat Chat? @relation(fields: [chatId], references: [id], onDelete: SetNull)
  mentor Mentor? @relation(fields: [mentorId], references: [id], onDelete: SetNull)

  @@map("messages")
}

// Funding account model for payment processing
model FundingAccount {
  id              String   @id @default(cuid())
  userId          String
  accountType     String   // crypto, fiat, subscription
  accountName     String   // Display name for the account
  accountAddress  String?  // For crypto addresses
  accountDetails  Json?    // Encrypted account details
  isActive        Boolean  @default(true)
  balance         Decimal? @db.Decimal(10, 2) // Current balance

  credits Int?
  remainingCredits Int?
  currency        String   @default("USD")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("funding_accounts")
}

// Funding account model for payment processing
model Transactions {
  id              String   @id @default(cuid())
  userId          String

  type String
  action String?
  tools String[]

  metadata_tx Json?
  accountDetails  Json?    // Encrypted account details

  dollarCost Decimal?
  creditsUsed Int?
  creditEstimated Int?
  priceCredit Int?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model MentorPerUser {
  id           String   @id @default(cuid())
  userId       String
  platform     String
  name String?
  knowledges String[]
  about String?
}

// Session model for JWT management
model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  refreshToken String?  @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isActive     Boolean  @default(true)
  userAgent    String?
  ipAddress    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Task model linked to users
model Task {
  id              String    @id @default(cuid())
  userId          String
  title           String
  description     String?
  completed       Boolean   @default(false)
  priority        String    @default("medium") // low, medium, high
  category        String?
  dueDate         DateTime?
  estimatedMinutes Int?
  actualMinutes   Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  isArchived Boolean @default(false)
  order Int?
  
  isPublic Boolean @default(false)

  // Subtask relationships
  parentTaskId    String?   // ID of the parent task
  parentTask      Task?     @relation("TaskSubtasks", fields: [parentTaskId], references: [id], onDelete: SetNull)
  subtasks        Task[]    @relation("TaskSubtasks")

  // Goal relationships - array of goal IDs
  goalIds String[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  timerSessions TimerSession[]

  @@map("tasks")
}

// Goal model linked to users
model Goal {
  id           String    @id @default(cuid())
  userId       String
  title        String
  description  String?
  targetDate   DateTime?
  completed    Boolean   @default(false)
  progress     Int       @default(0) // 0-100
  category     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  relatedTaskIds String[] // Array of task IDs as strings (legacy field)
  taskIds String[] // Array of task IDs for direct relationship
  isPublic Boolean @default(false)
  isProfilePublic Boolean @default(false)

  isArchived Boolean @default(false)

  topics String[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  timerSessions TimerSession[]

  @@map("goals")
}

// Timer session model (general)
model TimerSession {
  id        String    @id @default(cuid())
  type String
  userId    String
  taskId    String?
  goalId    String?
  startTime DateTime
  endTime   DateTime?
  duration  Int       // in seconds
  completed Boolean   @default(false)
  note     String?
  notes String[]
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task? @relation(fields: [taskId], references: [id], onDelete: SetNull)
  goal Goal? @relation(fields: [goalId], references: [id], onDelete: SetNull)


  metadata Json?
  isHavingFun     Boolean?
  activities      String[]  // Array of activities
  persons         String[]  // Array of persons
  location        String?
  weather         String?
  mood            String?
  energyLevel     String?
  productivityLevel String?

  @@map("timer_sessions")
}

// User settings model
model UserSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  defaultFocusDuration Int     @default(25) // in minutes
  defaultBreakDuration Int     @default(5)  // in minutes
  autoStartBreaks     Boolean  @default(false)
  autoStartSessions   Boolean  @default(false)
  notifications       Boolean  @default(true)
  theme               String   @default("auto") // light, dark, auto
  updatedAt           DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// Badge model for gamification
model Badge {
  id          String   @id @default(cuid())
  userId      String
  type        String   // e.g. 'daily_connection', 'streak', etc.
  name        String
  description String?
  icon        String?  // emoji or icon name
  dateAwarded DateTime @default(now())
  meta        Json?

  nftContractAddress String?
  nftTokenId String?
  imageUrl String?

  isCompleted String?
  requirements String[]

  // Gamification fields
  rarity String? @default("common") // common, rare, epic, legendary
  xpReward Int? @default(0)
  tokenReward Int? @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt    DateTime? @default(now())
  

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type], map: "badges_userId_type_idx")
  @@map("badges")
}


// Badge model for gamification
model Quests {
  id          String   @id @default(cuid())
  userId      String
  isCompleted String?
  requirements String[]


  isPersonnalized Boolean?

  taskAbout String?
  type        String   // e.g. 'daily_connection', 'streak', etc.
  name        String
  description String?
  icon        String?  // emoji or icon name
  dateAwarded DateTime @default(now())
  meta        Json?
  createdAt DateTime @default(now())
  updatedAt  DateTime? @default(now())
  isMinted Boolean @default(false)
  nftContractAddress String?
  nftTokenId String?
  imageUrl String?

  difficulty Int?

  rewardXp Int?
  rewardTokens Int? @default(0)
  rewardBadge String?
  badgeReward String?
  levelRequired Int?
  progress Int?


  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type], map: "quests_userId_type_idx")
  @@map("quests")
}


model Notes {
  id          String   @id @default(cuid())
  requirements String[]

  title String?
  text String?
  description String?
  summary String?
  topics String[]
  sources String[] // Keep for backward compatibility
  aiSources String[]
  aiTopics String[]
  metadata  Json?

  externalLink String?
  externalLinks String[]

  isRoot Boolean @default(false)

  platform String?

  aiSummary String?

  type        String?  
  
  difficulty Int?
  
  // New fields for notebook functionality
  isNotebook Boolean @default(false)
  notebookSettings Json? // For notebook-specific settings
  
  // Hierarchical note support
  parentNoteId String?
  childNoteIds String[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId      String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // New relation to structured sources
  noteSources NoteSources[]
  
  // New relation to note relations
  sourceRelations NoteRelations[] @relation("SourceNote")
  targetRelations NoteRelations[] @relation("TargetNote")

  @@map("notes")
}

// New model for structured note sources
model NoteSources {
  id          String   @id @default(cuid())
  noteId      String
  type        String   // 'text', 'link', 'youtube', 'google_drive', 'file', 'website'
  title       String
  content     String?  // For text sources
  url         String?  // For link/youtube/website sources
  fileType    String?  // For file sources
  fileSize    Int?     // For file sources
  metadata    Json?    // Additional metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


  ai_metadata Json?
  ai_summary String?
  ai_questions String[]

  // Relations
  note Notes @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@map("noteSources")
}

// New model for note-to-note relationships
model NoteRelations {
  id            String   @id @default(cuid())
  sourceNoteId  String
  targetNoteId  String
  relationType  String   // 'references', 'extends', 'contradicts', 'supports', 'related'
  strength      Float    @default(0.5) // 0-1 scale
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  sourceNote Notes @relation("SourceNote", fields: [sourceNoteId], references: [id], onDelete: Cascade)
  targetNote Notes @relation("TargetNote", fields: [targetNoteId], references: [id], onDelete: Cascade)

  @@unique([sourceNoteId, targetNoteId])
  @@map("noteRelations")
}


model EmbeddingSync {
  id         String   @id
  userId     String   @unique
  lastSyncAt DateTime
  syncStatus String   @default("pending")
  dataTypes  String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("embedding_sync")
}

model ConversationSession {
  id        String   @id @default(cuid())
  userId    String
  sessionId String   @unique
  status    String   @default("active") // active, ended, paused
  metadata  Json?
  startedAt DateTime @default(now())
  endedAt   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("conversation_sessions")
}